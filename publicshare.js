// source: cs3/sharing/link/v1beta1/resources.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.cs3.sharing.link.v1beta1.PublicShare');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.cs3.identity.user.v1beta1.UserId');
goog.require('proto.cs3.sharing.link.v1beta1.PublicShareId');
goog.require('proto.cs3.sharing.link.v1beta1.PublicSharePermissions');
goog.require('proto.cs3.sharing.link.v1beta1.ShareSignature');
goog.require('proto.cs3.storage.provider.v1beta1.ResourceId');
goog.require('proto.cs3.types.v1beta1.Timestamp');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.link.v1beta1.PublicShare = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharing.link.v1beta1.PublicShare, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.link.v1beta1.PublicShare.displayName = 'proto.cs3.sharing.link.v1beta1.PublicShare';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.link.v1beta1.PublicShare.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.link.v1beta1.PublicShare} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.link.v1beta1.PublicShare.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.cs3.sharing.link.v1beta1.PublicShareId.toObject(includeInstance, f),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    resourceId: (f = msg.getResourceId()) && proto.cs3.storage.provider.v1beta1.ResourceId.toObject(includeInstance, f),
    permissions: (f = msg.getPermissions()) && proto.cs3.sharing.link.v1beta1.PublicSharePermissions.toObject(includeInstance, f),
    owner: (f = msg.getOwner()) && proto.cs3.identity.user.v1beta1.UserId.toObject(includeInstance, f),
    creator: (f = msg.getCreator()) && proto.cs3.identity.user.v1beta1.UserId.toObject(includeInstance, f),
    ctime: (f = msg.getCtime()) && proto.cs3.types.v1beta1.Timestamp.toObject(includeInstance, f),
    mtime: (f = msg.getMtime()) && proto.cs3.types.v1beta1.Timestamp.toObject(includeInstance, f),
    passwordProtected: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    expiration: (f = msg.getExpiration()) && proto.cs3.types.v1beta1.Timestamp.toObject(includeInstance, f),
    displayName: jspb.Message.getFieldWithDefault(msg, 11, ""),
    signature: (f = msg.getSignature()) && proto.cs3.sharing.link.v1beta1.ShareSignature.toObject(includeInstance, f),
    quicklink: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    description: jspb.Message.getFieldWithDefault(msg, 14, ""),
    notifyUploads: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    notifyUploadsExtraRecipients: jspb.Message.getFieldWithDefault(msg, 16, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.link.v1beta1.PublicShare;
  return proto.cs3.sharing.link.v1beta1.PublicShare.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.link.v1beta1.PublicShare} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cs3.sharing.link.v1beta1.PublicShareId;
      reader.readMessage(value,proto.cs3.sharing.link.v1beta1.PublicShareId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = new proto.cs3.storage.provider.v1beta1.ResourceId;
      reader.readMessage(value,proto.cs3.storage.provider.v1beta1.ResourceId.deserializeBinaryFromReader);
      msg.setResourceId(value);
      break;
    case 4:
      var value = new proto.cs3.sharing.link.v1beta1.PublicSharePermissions;
      reader.readMessage(value,proto.cs3.sharing.link.v1beta1.PublicSharePermissions.deserializeBinaryFromReader);
      msg.setPermissions(value);
      break;
    case 5:
      var value = new proto.cs3.identity.user.v1beta1.UserId;
      reader.readMessage(value,proto.cs3.identity.user.v1beta1.UserId.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 6:
      var value = new proto.cs3.identity.user.v1beta1.UserId;
      reader.readMessage(value,proto.cs3.identity.user.v1beta1.UserId.deserializeBinaryFromReader);
      msg.setCreator(value);
      break;
    case 7:
      var value = new proto.cs3.types.v1beta1.Timestamp;
      reader.readMessage(value,proto.cs3.types.v1beta1.Timestamp.deserializeBinaryFromReader);
      msg.setCtime(value);
      break;
    case 8:
      var value = new proto.cs3.types.v1beta1.Timestamp;
      reader.readMessage(value,proto.cs3.types.v1beta1.Timestamp.deserializeBinaryFromReader);
      msg.setMtime(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPasswordProtected(value);
      break;
    case 10:
      var value = new proto.cs3.types.v1beta1.Timestamp;
      reader.readMessage(value,proto.cs3.types.v1beta1.Timestamp.deserializeBinaryFromReader);
      msg.setExpiration(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 12:
      var value = new proto.cs3.sharing.link.v1beta1.ShareSignature;
      reader.readMessage(value,proto.cs3.sharing.link.v1beta1.ShareSignature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setQuicklink(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotifyUploads(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotifyUploadsExtraRecipients(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.link.v1beta1.PublicShare.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.link.v1beta1.PublicShare} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.link.v1beta1.PublicShare.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cs3.sharing.link.v1beta1.PublicShareId.serializeBinaryToWriter
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResourceId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cs3.storage.provider.v1beta1.ResourceId.serializeBinaryToWriter
    );
  }
  f = message.getPermissions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cs3.sharing.link.v1beta1.PublicSharePermissions.serializeBinaryToWriter
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cs3.identity.user.v1beta1.UserId.serializeBinaryToWriter
    );
  }
  f = message.getCreator();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.cs3.identity.user.v1beta1.UserId.serializeBinaryToWriter
    );
  }
  f = message.getCtime();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.cs3.types.v1beta1.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMtime();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.cs3.types.v1beta1.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPasswordProtected();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getExpiration();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.cs3.types.v1beta1.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.cs3.sharing.link.v1beta1.ShareSignature.serializeBinaryToWriter
    );
  }
  f = message.getQuicklink();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getNotifyUploads();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getNotifyUploadsExtraRecipients();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * optional PublicShareId id = 1;
 * @return {?proto.cs3.sharing.link.v1beta1.PublicShareId}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.getId = function() {
  return /** @type{?proto.cs3.sharing.link.v1beta1.PublicShareId} */ (
    jspb.Message.getWrapperField(this, proto.cs3.sharing.link.v1beta1.PublicShareId, 1));
};


/**
 * @param {?proto.cs3.sharing.link.v1beta1.PublicShareId|undefined} value
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
*/
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional cs3.storage.provider.v1beta1.ResourceId resource_id = 3;
 * @return {?proto.cs3.storage.provider.v1beta1.ResourceId}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.getResourceId = function() {
  return /** @type{?proto.cs3.storage.provider.v1beta1.ResourceId} */ (
    jspb.Message.getWrapperField(this, proto.cs3.storage.provider.v1beta1.ResourceId, 3));
};


/**
 * @param {?proto.cs3.storage.provider.v1beta1.ResourceId|undefined} value
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
*/
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.setResourceId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.clearResourceId = function() {
  return this.setResourceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.hasResourceId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PublicSharePermissions permissions = 4;
 * @return {?proto.cs3.sharing.link.v1beta1.PublicSharePermissions}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.getPermissions = function() {
  return /** @type{?proto.cs3.sharing.link.v1beta1.PublicSharePermissions} */ (
    jspb.Message.getWrapperField(this, proto.cs3.sharing.link.v1beta1.PublicSharePermissions, 4));
};


/**
 * @param {?proto.cs3.sharing.link.v1beta1.PublicSharePermissions|undefined} value
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
*/
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.setPermissions = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.clearPermissions = function() {
  return this.setPermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional cs3.identity.user.v1beta1.UserId owner = 5;
 * @return {?proto.cs3.identity.user.v1beta1.UserId}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.getOwner = function() {
  return /** @type{?proto.cs3.identity.user.v1beta1.UserId} */ (
    jspb.Message.getWrapperField(this, proto.cs3.identity.user.v1beta1.UserId, 5));
};


/**
 * @param {?proto.cs3.identity.user.v1beta1.UserId|undefined} value
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
*/
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.setOwner = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.clearOwner = function() {
  return this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional cs3.identity.user.v1beta1.UserId creator = 6;
 * @return {?proto.cs3.identity.user.v1beta1.UserId}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.getCreator = function() {
  return /** @type{?proto.cs3.identity.user.v1beta1.UserId} */ (
    jspb.Message.getWrapperField(this, proto.cs3.identity.user.v1beta1.UserId, 6));
};


/**
 * @param {?proto.cs3.identity.user.v1beta1.UserId|undefined} value
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
*/
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.setCreator = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.clearCreator = function() {
  return this.setCreator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.hasCreator = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional cs3.types.v1beta1.Timestamp ctime = 7;
 * @return {?proto.cs3.types.v1beta1.Timestamp}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.getCtime = function() {
  return /** @type{?proto.cs3.types.v1beta1.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.cs3.types.v1beta1.Timestamp, 7));
};


/**
 * @param {?proto.cs3.types.v1beta1.Timestamp|undefined} value
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
*/
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.setCtime = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.clearCtime = function() {
  return this.setCtime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.hasCtime = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional cs3.types.v1beta1.Timestamp mtime = 8;
 * @return {?proto.cs3.types.v1beta1.Timestamp}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.getMtime = function() {
  return /** @type{?proto.cs3.types.v1beta1.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.cs3.types.v1beta1.Timestamp, 8));
};


/**
 * @param {?proto.cs3.types.v1beta1.Timestamp|undefined} value
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
*/
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.setMtime = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.clearMtime = function() {
  return this.setMtime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.hasMtime = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool password_protected = 9;
 * @return {boolean}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.getPasswordProtected = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.setPasswordProtected = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional cs3.types.v1beta1.Timestamp expiration = 10;
 * @return {?proto.cs3.types.v1beta1.Timestamp}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.getExpiration = function() {
  return /** @type{?proto.cs3.types.v1beta1.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.cs3.types.v1beta1.Timestamp, 10));
};


/**
 * @param {?proto.cs3.types.v1beta1.Timestamp|undefined} value
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
*/
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.setExpiration = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.clearExpiration = function() {
  return this.setExpiration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.hasExpiration = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string display_name = 11;
 * @return {string}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional ShareSignature signature = 12;
 * @return {?proto.cs3.sharing.link.v1beta1.ShareSignature}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.getSignature = function() {
  return /** @type{?proto.cs3.sharing.link.v1beta1.ShareSignature} */ (
    jspb.Message.getWrapperField(this, proto.cs3.sharing.link.v1beta1.ShareSignature, 12));
};


/**
 * @param {?proto.cs3.sharing.link.v1beta1.ShareSignature|undefined} value
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
*/
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.setSignature = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.clearSignature = function() {
  return this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bool quicklink = 13;
 * @return {boolean}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.getQuicklink = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.setQuicklink = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional string description = 14;
 * @return {string}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional bool notify_uploads = 15;
 * @return {boolean}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.getNotifyUploads = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.setNotifyUploads = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional string notify_uploads_extra_recipients = 16;
 * @return {string}
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.getNotifyUploadsExtraRecipients = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.cs3.sharing.link.v1beta1.PublicShare} returns this
 */
proto.cs3.sharing.link.v1beta1.PublicShare.prototype.setNotifyUploadsExtraRecipients = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


