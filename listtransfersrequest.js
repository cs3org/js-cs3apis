// source: cs3/tx/v1beta1/tx_api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.cs3.tx.v1beta1.ListTransfersRequest');
goog.provide('proto.cs3.tx.v1beta1.ListTransfersRequest.Filter');
goog.provide('proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.TermCase');
goog.provide('proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.Type');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.cs3.sharing.ocm.v1beta1.ShareId');
goog.require('proto.cs3.tx.v1beta1.TxId');
goog.require('proto.cs3.types.v1beta1.Opaque');

goog.forwardDeclare('proto.cs3.tx.v1beta1.Status');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.tx.v1beta1.ListTransfersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cs3.tx.v1beta1.ListTransfersRequest.repeatedFields_, null);
};
goog.inherits(proto.cs3.tx.v1beta1.ListTransfersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.tx.v1beta1.ListTransfersRequest.displayName = 'proto.cs3.tx.v1beta1.ListTransfersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.oneofGroups_);
};
goog.inherits(proto.cs3.tx.v1beta1.ListTransfersRequest.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.displayName = 'proto.cs3.tx.v1beta1.ListTransfersRequest.Filter';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.tx.v1beta1.ListTransfersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.tx.v1beta1.ListTransfersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaque: (f = msg.getOpaque()) && proto.cs3.types.v1beta1.Opaque.toObject(includeInstance, f),
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.tx.v1beta1.ListTransfersRequest}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.tx.v1beta1.ListTransfersRequest;
  return proto.cs3.tx.v1beta1.ListTransfersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.tx.v1beta1.ListTransfersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.tx.v1beta1.ListTransfersRequest}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cs3.types.v1beta1.Opaque;
      reader.readMessage(value,proto.cs3.types.v1beta1.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 2:
      var value = new proto.cs3.tx.v1beta1.ListTransfersRequest.Filter;
      reader.readMessage(value,proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.tx.v1beta1.ListTransfersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.tx.v1beta1.ListTransfersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cs3.types.v1beta1.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.TermCase = {
  TERM_NOT_SET: 0,
  STATUS: 2,
  SHARE_ID: 3,
  TX_ID: 4
};

/**
 * @return {proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.TermCase}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.prototype.getTermCase = function() {
  return /** @type {proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.TermCase} */(jspb.Message.computeOneofCase(this, proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    shareId: (f = msg.getShareId()) && proto.cs3.sharing.ocm.v1beta1.ShareId.toObject(includeInstance, f),
    txId: (f = msg.getTxId()) && proto.cs3.tx.v1beta1.TxId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.tx.v1beta1.ListTransfersRequest.Filter;
  return proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.cs3.tx.v1beta1.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.cs3.sharing.ocm.v1beta1.ShareId;
      reader.readMessage(value,proto.cs3.sharing.ocm.v1beta1.ShareId.deserializeBinaryFromReader);
      msg.setShareId(value);
      break;
    case 4:
      var value = new proto.cs3.tx.v1beta1.TxId;
      reader.readMessage(value,proto.cs3.tx.v1beta1.TxId.deserializeBinaryFromReader);
      msg.setTxId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.cs3.tx.v1beta1.Status} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getShareId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cs3.sharing.ocm.v1beta1.ShareId.serializeBinaryToWriter
    );
  }
  f = message.getTxId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cs3.tx.v1beta1.TxId.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.Type = {
  TYPE_INVALID: 0,
  TYPE_STATUS: 1,
  TYPE_SHARE_ID: 2,
  TYPE_TX_ID: 3
};

/**
 * optional Type type = 1;
 * @return {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.Type}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.prototype.getType = function() {
  return /** @type {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.Type} value
 * @return {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter} returns this
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.cs3.tx.v1beta1.Status}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.prototype.getStatus = function() {
  return /** @type {!proto.cs3.tx.v1beta1.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.cs3.tx.v1beta1.Status} value
 * @return {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter} returns this
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.prototype.setStatus = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter} returns this
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.prototype.clearStatus = function() {
  return jspb.Message.setOneofField(this, 2, proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional cs3.sharing.ocm.v1beta1.ShareId share_id = 3;
 * @return {?proto.cs3.sharing.ocm.v1beta1.ShareId}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.prototype.getShareId = function() {
  return /** @type{?proto.cs3.sharing.ocm.v1beta1.ShareId} */ (
    jspb.Message.getWrapperField(this, proto.cs3.sharing.ocm.v1beta1.ShareId, 3));
};


/**
 * @param {?proto.cs3.sharing.ocm.v1beta1.ShareId|undefined} value
 * @return {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter} returns this
*/
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.prototype.setShareId = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter} returns this
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.prototype.clearShareId = function() {
  return this.setShareId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.prototype.hasShareId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TxId tx_id = 4;
 * @return {?proto.cs3.tx.v1beta1.TxId}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.prototype.getTxId = function() {
  return /** @type{?proto.cs3.tx.v1beta1.TxId} */ (
    jspb.Message.getWrapperField(this, proto.cs3.tx.v1beta1.TxId, 4));
};


/**
 * @param {?proto.cs3.tx.v1beta1.TxId|undefined} value
 * @return {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter} returns this
*/
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.prototype.setTxId = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter} returns this
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.prototype.clearTxId = function() {
  return this.setTxId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.Filter.prototype.hasTxId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 1;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, proto.cs3.types.v1beta1.Opaque, 1));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.tx.v1beta1.ListTransfersRequest} returns this
*/
proto.cs3.tx.v1beta1.ListTransfersRequest.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.tx.v1beta1.ListTransfersRequest} returns this
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Filter filters = 2;
 * @return {!Array<!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter>}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cs3.tx.v1beta1.ListTransfersRequest.Filter, 2));
};


/**
 * @param {!Array<!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter>} value
 * @return {!proto.cs3.tx.v1beta1.ListTransfersRequest} returns this
*/
proto.cs3.tx.v1beta1.ListTransfersRequest.prototype.setFiltersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cs3.tx.v1beta1.ListTransfersRequest.Filter}
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cs3.tx.v1beta1.ListTransfersRequest.Filter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cs3.tx.v1beta1.ListTransfersRequest} returns this
 */
proto.cs3.tx.v1beta1.ListTransfersRequest.prototype.clearFiltersList = function() {
  return this.setFiltersList([]);
};


