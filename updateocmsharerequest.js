// source: cs3/sharing/ocm/v1beta1/ocm_api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest');
goog.provide('proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField');
goog.provide('proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.FieldCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.cs3.sharing.ocm.v1beta1.AccessMethod');
goog.require('proto.cs3.sharing.ocm.v1beta1.ShareReference');
goog.require('proto.cs3.types.v1beta1.Opaque');
goog.require('proto.cs3.types.v1beta1.Timestamp');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.repeatedFields_, null);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.displayName = 'proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.oneofGroups_);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.displayName = 'proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaque: (f = msg.getOpaque()) && proto.cs3.types.v1beta1.Opaque.toObject(includeInstance, f),
    ref: (f = msg.getRef()) && proto.cs3.sharing.ocm.v1beta1.ShareReference.toObject(includeInstance, f),
    fieldList: jspb.Message.toObjectList(msg.getFieldList(),
    proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest;
  return proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cs3.types.v1beta1.Opaque;
      reader.readMessage(value,proto.cs3.types.v1beta1.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 2:
      var value = new proto.cs3.sharing.ocm.v1beta1.ShareReference;
      reader.readMessage(value,proto.cs3.sharing.ocm.v1beta1.ShareReference.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    case 3:
      var value = new proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField;
      reader.readMessage(value,proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.deserializeBinaryFromReader);
      msg.addField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cs3.types.v1beta1.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cs3.sharing.ocm.v1beta1.ShareReference.serializeBinaryToWriter
    );
  }
  f = message.getFieldList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.FieldCase = {
  FIELD_NOT_SET: 0,
  EXPIRATION: 1,
  ACCESS_METHODS: 2
};

/**
 * @return {proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.FieldCase}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.getFieldCase = function() {
  return /** @type {proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.FieldCase} */(jspb.Message.computeOneofCase(this, proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.toObject = function(includeInstance, msg) {
  var f, obj = {
    expiration: (f = msg.getExpiration()) && proto.cs3.types.v1beta1.Timestamp.toObject(includeInstance, f),
    accessMethods: (f = msg.getAccessMethods()) && proto.cs3.sharing.ocm.v1beta1.AccessMethod.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField;
  return proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cs3.types.v1beta1.Timestamp;
      reader.readMessage(value,proto.cs3.types.v1beta1.Timestamp.deserializeBinaryFromReader);
      msg.setExpiration(value);
      break;
    case 2:
      var value = new proto.cs3.sharing.ocm.v1beta1.AccessMethod;
      reader.readMessage(value,proto.cs3.sharing.ocm.v1beta1.AccessMethod.deserializeBinaryFromReader);
      msg.setAccessMethods(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpiration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cs3.types.v1beta1.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAccessMethods();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cs3.sharing.ocm.v1beta1.AccessMethod.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.types.v1beta1.Timestamp expiration = 1;
 * @return {?proto.cs3.types.v1beta1.Timestamp}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.getExpiration = function() {
  return /** @type{?proto.cs3.types.v1beta1.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.cs3.types.v1beta1.Timestamp, 1));
};


/**
 * @param {?proto.cs3.types.v1beta1.Timestamp|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField} returns this
*/
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.setExpiration = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.clearExpiration = function() {
  return this.setExpiration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.hasExpiration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AccessMethod access_methods = 2;
 * @return {?proto.cs3.sharing.ocm.v1beta1.AccessMethod}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.getAccessMethods = function() {
  return /** @type{?proto.cs3.sharing.ocm.v1beta1.AccessMethod} */ (
    jspb.Message.getWrapperField(this, proto.cs3.sharing.ocm.v1beta1.AccessMethod, 2));
};


/**
 * @param {?proto.cs3.sharing.ocm.v1beta1.AccessMethod|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField} returns this
*/
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.setAccessMethods = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.clearAccessMethods = function() {
  return this.setAccessMethods(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.hasAccessMethods = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 1;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, proto.cs3.types.v1beta1.Opaque, 1));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShareReference ref = 2;
 * @return {?proto.cs3.sharing.ocm.v1beta1.ShareReference}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.getRef = function() {
  return /** @type{?proto.cs3.sharing.ocm.v1beta1.ShareReference} */ (
    jspb.Message.getWrapperField(this, proto.cs3.sharing.ocm.v1beta1.ShareReference, 2));
};


/**
 * @param {?proto.cs3.sharing.ocm.v1beta1.ShareReference|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.setRef = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.clearRef = function() {
  return this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.hasRef = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated UpdateField field = 3;
 * @return {!Array<!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField>}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.getFieldList = function() {
  return /** @type{!Array<!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField, 3));
};


/**
 * @param {!Array<!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField>} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.setFieldList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.addField = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.clearFieldList = function() {
  return this.setFieldList([]);
};


