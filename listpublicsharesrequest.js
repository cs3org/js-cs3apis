// source: cs3/sharing/link/v1beta1/link_api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest');
goog.provide('proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter');
goog.provide('proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.TermCase');
goog.provide('proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.Type');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.cs3.identity.user.v1beta1.UserId');
goog.require('proto.cs3.storage.provider.v1beta1.ResourceId');
goog.require('proto.cs3.types.v1beta1.Opaque');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.repeatedFields_, null);
};
goog.inherits(proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.displayName = 'proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.oneofGroups_);
};
goog.inherits(proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.displayName = 'proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaque: (f = msg.getOpaque()) && proto.cs3.types.v1beta1.Opaque.toObject(includeInstance, f),
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.toObject, includeInstance),
    sign: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    pageSize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pageToken: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest;
  return proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cs3.types.v1beta1.Opaque;
      reader.readMessage(value,proto.cs3.types.v1beta1.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 2:
      var value = new proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter;
      reader.readMessage(value,proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSign(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cs3.types.v1beta1.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.serializeBinaryToWriter
    );
  }
  f = message.getSign();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.TermCase = {
  TERM_NOT_SET: 0,
  RESOURCE_ID: 3,
  OWNER: 4,
  CREATOR: 5
};

/**
 * @return {proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.TermCase}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.prototype.getTermCase = function() {
  return /** @type {proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.TermCase} */(jspb.Message.computeOneofCase(this, proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    resourceId: (f = msg.getResourceId()) && proto.cs3.storage.provider.v1beta1.ResourceId.toObject(includeInstance, f),
    owner: (f = msg.getOwner()) && proto.cs3.identity.user.v1beta1.UserId.toObject(includeInstance, f),
    creator: (f = msg.getCreator()) && proto.cs3.identity.user.v1beta1.UserId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter;
  return proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.cs3.storage.provider.v1beta1.ResourceId;
      reader.readMessage(value,proto.cs3.storage.provider.v1beta1.ResourceId.deserializeBinaryFromReader);
      msg.setResourceId(value);
      break;
    case 4:
      var value = new proto.cs3.identity.user.v1beta1.UserId;
      reader.readMessage(value,proto.cs3.identity.user.v1beta1.UserId.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 5:
      var value = new proto.cs3.identity.user.v1beta1.UserId;
      reader.readMessage(value,proto.cs3.identity.user.v1beta1.UserId.deserializeBinaryFromReader);
      msg.setCreator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getResourceId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cs3.storage.provider.v1beta1.ResourceId.serializeBinaryToWriter
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cs3.identity.user.v1beta1.UserId.serializeBinaryToWriter
    );
  }
  f = message.getCreator();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cs3.identity.user.v1beta1.UserId.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.Type = {
  TYPE_INVALID: 0,
  TYPE_RESOURCE_ID: 1,
  TYPE_OWNER: 2,
  TYPE_CREATOR: 3
};

/**
 * optional Type type = 2;
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.Type}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.prototype.getType = function() {
  return /** @type {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.Type} value
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter} returns this
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional cs3.storage.provider.v1beta1.ResourceId resource_id = 3;
 * @return {?proto.cs3.storage.provider.v1beta1.ResourceId}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.prototype.getResourceId = function() {
  return /** @type{?proto.cs3.storage.provider.v1beta1.ResourceId} */ (
    jspb.Message.getWrapperField(this, proto.cs3.storage.provider.v1beta1.ResourceId, 3));
};


/**
 * @param {?proto.cs3.storage.provider.v1beta1.ResourceId|undefined} value
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter} returns this
*/
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.prototype.setResourceId = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter} returns this
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.prototype.clearResourceId = function() {
  return this.setResourceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.prototype.hasResourceId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional cs3.identity.user.v1beta1.UserId owner = 4;
 * @return {?proto.cs3.identity.user.v1beta1.UserId}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.prototype.getOwner = function() {
  return /** @type{?proto.cs3.identity.user.v1beta1.UserId} */ (
    jspb.Message.getWrapperField(this, proto.cs3.identity.user.v1beta1.UserId, 4));
};


/**
 * @param {?proto.cs3.identity.user.v1beta1.UserId|undefined} value
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter} returns this
*/
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.prototype.setOwner = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter} returns this
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.prototype.clearOwner = function() {
  return this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional cs3.identity.user.v1beta1.UserId creator = 5;
 * @return {?proto.cs3.identity.user.v1beta1.UserId}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.prototype.getCreator = function() {
  return /** @type{?proto.cs3.identity.user.v1beta1.UserId} */ (
    jspb.Message.getWrapperField(this, proto.cs3.identity.user.v1beta1.UserId, 5));
};


/**
 * @param {?proto.cs3.identity.user.v1beta1.UserId|undefined} value
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter} returns this
*/
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.prototype.setCreator = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter} returns this
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.prototype.clearCreator = function() {
  return this.setCreator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.prototype.hasCreator = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 1;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, proto.cs3.types.v1beta1.Opaque, 1));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest} returns this
*/
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest} returns this
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Filter filters = 2;
 * @return {!Array<!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter>}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter, 2));
};


/**
 * @param {!Array<!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter>} value
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest} returns this
*/
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.prototype.setFiltersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest} returns this
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.prototype.clearFiltersList = function() {
  return this.setFiltersList([]);
};


/**
 * optional bool sign = 3;
 * @return {boolean}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.prototype.getSign = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest} returns this
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.prototype.setSign = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int32 page_size = 4;
 * @return {number}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest} returns this
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.prototype.setPageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string page_token = 5;
 * @return {string}
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest} returns this
 */
proto.cs3.sharing.link.v1beta1.ListPublicSharesRequest.prototype.setPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


