/**
 * @fileoverview gRPC-Web generated client stub for cs3.tx.v1beta1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: cs3/tx/v1beta1/tx_api.proto


/* eslint-disable */
// @ts-nocheck


goog.provide('proto.cs3.tx.v1beta1.TxAPIClient');
goog.provide('proto.cs3.tx.v1beta1.TxAPIPromiseClient');

goog.require('grpc.web.MethodDescriptor');
goog.require('grpc.web.MethodType');
goog.require('grpc.web.GrpcWebClientBase');
goog.require('grpc.web.AbstractClientBase');
goog.require('grpc.web.ClientReadableStream');
goog.require('grpc.web.RpcError');
goog.require('proto.cs3.tx.v1beta1.CancelTransferRequest');
goog.require('proto.cs3.tx.v1beta1.CancelTransferResponse');
goog.require('proto.cs3.tx.v1beta1.CreateTransferRequest');
goog.require('proto.cs3.tx.v1beta1.CreateTransferResponse');
goog.require('proto.cs3.tx.v1beta1.GetTransferStatusRequest');
goog.require('proto.cs3.tx.v1beta1.GetTransferStatusResponse');
goog.require('proto.cs3.tx.v1beta1.ListTransfersRequest');
goog.require('proto.cs3.tx.v1beta1.ListTransfersResponse');
goog.require('proto.cs3.tx.v1beta1.RetryTransferRequest');
goog.require('proto.cs3.tx.v1beta1.RetryTransferResponse');

goog.requireType('grpc.web.ClientOptions');



goog.scope(function() {

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.cs3.tx.v1beta1.TxAPIClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.cs3.tx.v1beta1.TxAPIPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs3.tx.v1beta1.CreateTransferRequest,
 *   !proto.cs3.tx.v1beta1.CreateTransferResponse>}
 */
const methodDescriptor_TxAPI_CreateTransfer = new grpc.web.MethodDescriptor(
  '/cs3.tx.v1beta1.TxAPI/CreateTransfer',
  grpc.web.MethodType.UNARY,
  proto.cs3.tx.v1beta1.CreateTransferRequest,
  proto.cs3.tx.v1beta1.CreateTransferResponse,
  /**
   * @param {!proto.cs3.tx.v1beta1.CreateTransferRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.cs3.tx.v1beta1.CreateTransferResponse.deserializeBinary
);


/**
 * @param {!proto.cs3.tx.v1beta1.CreateTransferRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs3.tx.v1beta1.CreateTransferResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs3.tx.v1beta1.CreateTransferResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs3.tx.v1beta1.TxAPIClient.prototype.createTransfer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/cs3.tx.v1beta1.TxAPI/CreateTransfer',
      request,
      metadata || {},
      methodDescriptor_TxAPI_CreateTransfer,
      callback);
};


/**
 * @param {!proto.cs3.tx.v1beta1.CreateTransferRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs3.tx.v1beta1.CreateTransferResponse>}
 *     Promise that resolves to the response
 */
proto.cs3.tx.v1beta1.TxAPIPromiseClient.prototype.createTransfer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/cs3.tx.v1beta1.TxAPI/CreateTransfer',
      request,
      metadata || {},
      methodDescriptor_TxAPI_CreateTransfer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs3.tx.v1beta1.GetTransferStatusRequest,
 *   !proto.cs3.tx.v1beta1.GetTransferStatusResponse>}
 */
const methodDescriptor_TxAPI_GetTransferStatus = new grpc.web.MethodDescriptor(
  '/cs3.tx.v1beta1.TxAPI/GetTransferStatus',
  grpc.web.MethodType.UNARY,
  proto.cs3.tx.v1beta1.GetTransferStatusRequest,
  proto.cs3.tx.v1beta1.GetTransferStatusResponse,
  /**
   * @param {!proto.cs3.tx.v1beta1.GetTransferStatusRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.cs3.tx.v1beta1.GetTransferStatusResponse.deserializeBinary
);


/**
 * @param {!proto.cs3.tx.v1beta1.GetTransferStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs3.tx.v1beta1.GetTransferStatusResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs3.tx.v1beta1.GetTransferStatusResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs3.tx.v1beta1.TxAPIClient.prototype.getTransferStatus =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/cs3.tx.v1beta1.TxAPI/GetTransferStatus',
      request,
      metadata || {},
      methodDescriptor_TxAPI_GetTransferStatus,
      callback);
};


/**
 * @param {!proto.cs3.tx.v1beta1.GetTransferStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs3.tx.v1beta1.GetTransferStatusResponse>}
 *     Promise that resolves to the response
 */
proto.cs3.tx.v1beta1.TxAPIPromiseClient.prototype.getTransferStatus =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/cs3.tx.v1beta1.TxAPI/GetTransferStatus',
      request,
      metadata || {},
      methodDescriptor_TxAPI_GetTransferStatus);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs3.tx.v1beta1.CancelTransferRequest,
 *   !proto.cs3.tx.v1beta1.CancelTransferResponse>}
 */
const methodDescriptor_TxAPI_CancelTransfer = new grpc.web.MethodDescriptor(
  '/cs3.tx.v1beta1.TxAPI/CancelTransfer',
  grpc.web.MethodType.UNARY,
  proto.cs3.tx.v1beta1.CancelTransferRequest,
  proto.cs3.tx.v1beta1.CancelTransferResponse,
  /**
   * @param {!proto.cs3.tx.v1beta1.CancelTransferRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.cs3.tx.v1beta1.CancelTransferResponse.deserializeBinary
);


/**
 * @param {!proto.cs3.tx.v1beta1.CancelTransferRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs3.tx.v1beta1.CancelTransferResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs3.tx.v1beta1.CancelTransferResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs3.tx.v1beta1.TxAPIClient.prototype.cancelTransfer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/cs3.tx.v1beta1.TxAPI/CancelTransfer',
      request,
      metadata || {},
      methodDescriptor_TxAPI_CancelTransfer,
      callback);
};


/**
 * @param {!proto.cs3.tx.v1beta1.CancelTransferRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs3.tx.v1beta1.CancelTransferResponse>}
 *     Promise that resolves to the response
 */
proto.cs3.tx.v1beta1.TxAPIPromiseClient.prototype.cancelTransfer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/cs3.tx.v1beta1.TxAPI/CancelTransfer',
      request,
      metadata || {},
      methodDescriptor_TxAPI_CancelTransfer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs3.tx.v1beta1.ListTransfersRequest,
 *   !proto.cs3.tx.v1beta1.ListTransfersResponse>}
 */
const methodDescriptor_TxAPI_ListTransfers = new grpc.web.MethodDescriptor(
  '/cs3.tx.v1beta1.TxAPI/ListTransfers',
  grpc.web.MethodType.UNARY,
  proto.cs3.tx.v1beta1.ListTransfersRequest,
  proto.cs3.tx.v1beta1.ListTransfersResponse,
  /**
   * @param {!proto.cs3.tx.v1beta1.ListTransfersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.cs3.tx.v1beta1.ListTransfersResponse.deserializeBinary
);


/**
 * @param {!proto.cs3.tx.v1beta1.ListTransfersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs3.tx.v1beta1.ListTransfersResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs3.tx.v1beta1.ListTransfersResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs3.tx.v1beta1.TxAPIClient.prototype.listTransfers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/cs3.tx.v1beta1.TxAPI/ListTransfers',
      request,
      metadata || {},
      methodDescriptor_TxAPI_ListTransfers,
      callback);
};


/**
 * @param {!proto.cs3.tx.v1beta1.ListTransfersRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs3.tx.v1beta1.ListTransfersResponse>}
 *     Promise that resolves to the response
 */
proto.cs3.tx.v1beta1.TxAPIPromiseClient.prototype.listTransfers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/cs3.tx.v1beta1.TxAPI/ListTransfers',
      request,
      metadata || {},
      methodDescriptor_TxAPI_ListTransfers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs3.tx.v1beta1.RetryTransferRequest,
 *   !proto.cs3.tx.v1beta1.RetryTransferResponse>}
 */
const methodDescriptor_TxAPI_RetryTransfer = new grpc.web.MethodDescriptor(
  '/cs3.tx.v1beta1.TxAPI/RetryTransfer',
  grpc.web.MethodType.UNARY,
  proto.cs3.tx.v1beta1.RetryTransferRequest,
  proto.cs3.tx.v1beta1.RetryTransferResponse,
  /**
   * @param {!proto.cs3.tx.v1beta1.RetryTransferRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.cs3.tx.v1beta1.RetryTransferResponse.deserializeBinary
);


/**
 * @param {!proto.cs3.tx.v1beta1.RetryTransferRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs3.tx.v1beta1.RetryTransferResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs3.tx.v1beta1.RetryTransferResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs3.tx.v1beta1.TxAPIClient.prototype.retryTransfer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/cs3.tx.v1beta1.TxAPI/RetryTransfer',
      request,
      metadata || {},
      methodDescriptor_TxAPI_RetryTransfer,
      callback);
};


/**
 * @param {!proto.cs3.tx.v1beta1.RetryTransferRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs3.tx.v1beta1.RetryTransferResponse>}
 *     Promise that resolves to the response
 */
proto.cs3.tx.v1beta1.TxAPIPromiseClient.prototype.retryTransfer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/cs3.tx.v1beta1.TxAPI/RetryTransfer',
      request,
      metadata || {},
      methodDescriptor_TxAPI_RetryTransfer);
};


}); // goog.scope

